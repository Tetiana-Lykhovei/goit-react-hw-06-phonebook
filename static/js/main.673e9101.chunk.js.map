{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","redux/contacts/contact-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contact-reducer.js","redux/store.js","index.js"],"names":["module","exports","uuidv4","addContact","createAction","name","number","payload","id","deleteContact","changeFilter","ContactForm","state","handleSubmit","ev","preventDefault","props","contacts","find","item","toLowerCase","alert","onSubmit","resetForm","handleInputChange","e","target","value","setState","this","className","s","wrapper","type","onChange","Component","connect","items","dispatch","contact","contactsActions","filterContacts","filter","normFilter","includes","contactList","onDeleteContact","map","element","btn","onClick","filterValue","onFilter","App","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.673e9101.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"element\":\"ContactList_element__2rAWz\",\"btn\":\"ContactList_btn__yjlKK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactForm_wrapper__23uZV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__3hbMm\"};","import { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nuuidv4();\r\n\r\nconst addContact = createAction(\"contacts/add\", ({ name, number }) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction(\"contacts/delete\");\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contact-actions\";\r\nimport s from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n    const { name } = this.state;\r\n    const { contacts } = this.props;\r\n\r\n    const uniqueContact = contacts.find(\r\n      (item) => item.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    if (uniqueContact) {\r\n      alert(`${name} is already in your list`);\r\n      return;\r\n    }\r\n\r\n    this.props.onSubmit(this.state);\r\n    this.resetForm();\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={s.wrapper} onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.handleInputChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          Phone:\r\n          <input\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={this.handleInputChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (contact) => dispatch(contactsActions.addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contact-actions\";\r\nimport s from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ contactList, onDeleteContact }) => {\r\n  return (\r\n    <ul>\r\n      {contactList.map(({ id, name, number }) => (\r\n        <li className={s.element} key={id}>\r\n          <p>{name}: </p>\r\n          <p>{number}</p>\r\n          <button\r\n            className={s.btn}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contactList: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst filterContacts = (contacts, filter) => {\r\n  const normFilter = filter.toLowerCase();\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contactList: filterContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactsActions from \"../../redux/contacts/contact-actions\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ filterValue, onFilter }) => {\r\n  return (\r\n    <form className={s.wrapper}>\r\n      <label>\r\n        Find contacts by name{\" \"}\r\n        <input type=\"text\" value={filterValue} onChange={onFilter} />\r\n      </label>\r\n    </form>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filterValue: PropTypes.string.isRequired,\r\n  onFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filterValue: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onFilter: (ev) => dispatch(contactsActions.changeFilter(ev.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactsActions from \"./contact-actions\";\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.addContact]: (state, { payload }) => [...state, payload],\r\n  [contactsActions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nimport contactsReducer from \"./contacts/contact-reducer\";\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={\"Loading\"} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}